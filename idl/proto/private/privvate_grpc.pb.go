// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: idl/proto/private/privvate.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutoLabelClient is the client API for AutoLabel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutoLabelClient interface {
	AutoLabelAddTask(ctx context.Context, in *AutoLabelReq, opts ...grpc.CallOption) (*AutoLabelResp, error)
}

type autoLabelClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoLabelClient(cc grpc.ClientConnInterface) AutoLabelClient {
	return &autoLabelClient{cc}
}

func (c *autoLabelClient) AutoLabelAddTask(ctx context.Context, in *AutoLabelReq, opts ...grpc.CallOption) (*AutoLabelResp, error) {
	out := new(AutoLabelResp)
	err := c.cc.Invoke(ctx, "/proto.AutoLabel/AutoLabelAddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutoLabelServer is the server API for AutoLabel service.
// All implementations must embed UnimplementedAutoLabelServer
// for forward compatibility
type AutoLabelServer interface {
	AutoLabelAddTask(context.Context, *AutoLabelReq) (*AutoLabelResp, error)
	mustEmbedUnimplementedAutoLabelServer()
}

// UnimplementedAutoLabelServer must be embedded to have forward compatible implementations.
type UnimplementedAutoLabelServer struct {
}

func (UnimplementedAutoLabelServer) AutoLabelAddTask(context.Context, *AutoLabelReq) (*AutoLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoLabelAddTask not implemented")
}
func (UnimplementedAutoLabelServer) mustEmbedUnimplementedAutoLabelServer() {}

// UnsafeAutoLabelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoLabelServer will
// result in compilation errors.
type UnsafeAutoLabelServer interface {
	mustEmbedUnimplementedAutoLabelServer()
}

func RegisterAutoLabelServer(s grpc.ServiceRegistrar, srv AutoLabelServer) {
	s.RegisterService(&AutoLabel_ServiceDesc, srv)
}

func _AutoLabel_AutoLabelAddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoLabelServer).AutoLabelAddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AutoLabel/AutoLabelAddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoLabelServer).AutoLabelAddTask(ctx, req.(*AutoLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AutoLabel_ServiceDesc is the grpc.ServiceDesc for AutoLabel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutoLabel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AutoLabel",
	HandlerType: (*AutoLabelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoLabelAddTask",
			Handler:    _AutoLabel_AutoLabelAddTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/proto/private/privvate.proto",
}
